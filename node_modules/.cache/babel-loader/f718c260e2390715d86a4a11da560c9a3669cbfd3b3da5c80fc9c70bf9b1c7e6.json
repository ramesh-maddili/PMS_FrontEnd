{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport axios from 'axios';\nVue.config.productionTip = false;\naxios.defaults.baseURL = 'http://localhost:5000';\n\n// Request Interceptor - Attach access token\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Flag to avoid infinite loops\nlet isRefreshing = false;\nlet failedQueue = [];\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\n// Response Interceptor - Auto-refresh token on 401\naxios.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // If 401 and request hasn't been retried yet\n  if (error.response?.status === 401 && !originalRequest._retry && localStorage.getItem('refreshToken')) {\n    originalRequest._retry = true;\n    if (isRefreshing) {\n      return new Promise((resolve, reject) => {\n        failedQueue.push({\n          resolve,\n          reject\n        });\n      }).then(token => {\n        originalRequest.headers.Authorization = `Bearer ${token}`;\n        return axios(originalRequest);\n      });\n    }\n    isRefreshing = true;\n    try {\n      const res = await axios.post('/refresh', {\n        refreshToken: localStorage.getItem('refreshToken')\n      });\n      const newAccessToken = res.data.token;\n      localStorage.setItem('token', newAccessToken);\n      axios.defaults.headers.common.Authorization = `Bearer ${newAccessToken}`;\n      processQueue(null, newAccessToken);\n      return axios(originalRequest);\n    } catch (refreshError) {\n      processQueue(refreshError, null);\n      localStorage.clear();\n      router.push('/login');\n      return Promise.reject(refreshError);\n    } finally {\n      isRefreshing = false;\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Optional: Make axios available globally\nVue.prototype.$http = axios;\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app');","map":{"version":3,"names":["Vue","App","router","axios","config","productionTip","defaults","baseURL","interceptors","request","use","token","localStorage","getItem","headers","Authorization","isRefreshing","failedQueue","processQueue","error","forEach","prom","reject","resolve","response","originalRequest","status","_retry","Promise","push","then","res","post","refreshToken","newAccessToken","data","setItem","common","refreshError","clear","prototype","$http","render","h","$mount"],"sources":["C:/Users/FL_LPT-746/product-management-system-frontend/src/main.js"],"sourcesContent":["import Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport axios from 'axios'\n\nVue.config.productionTip = false\n\naxios.defaults.baseURL = 'http://localhost:5000'\n\n// Request Interceptor - Attach access token\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token')\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n  return config\n})\n\n// Flag to avoid infinite loops\nlet isRefreshing = false\nlet failedQueue = []\n\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error)\n    } else {\n      prom.resolve(token)\n    }\n  })\n  failedQueue = []\n}\n\n// Response Interceptor - Auto-refresh token on 401\naxios.interceptors.response.use(\n  response => response,\n  async error => {\n    const originalRequest = error.config\n\n    // If 401 and request hasn't been retried yet\n    if (\n      error.response?.status === 401 &&\n      !originalRequest._retry &&\n      localStorage.getItem('refreshToken')\n    ) {\n      originalRequest._retry = true\n\n      if (isRefreshing) {\n        return new Promise((resolve, reject) => {\n          failedQueue.push({ resolve, reject })\n        }).then(token => {\n          originalRequest.headers.Authorization = `Bearer ${token}`\n          return axios(originalRequest)\n        })\n      }\n\n      isRefreshing = true\n\n      try {\n        const res = await axios.post('/refresh', {\n          refreshToken: localStorage.getItem('refreshToken')\n        })\n\n        const newAccessToken = res.data.token\n        localStorage.setItem('token', newAccessToken)\n        axios.defaults.headers.common.Authorization = `Bearer ${newAccessToken}`\n\n        processQueue(null, newAccessToken)\n        return axios(originalRequest)\n      } catch (refreshError) {\n        processQueue(refreshError, null)\n        localStorage.clear()\n        router.push('/login')\n        return Promise.reject(refreshError)\n      } finally {\n        isRefreshing = false\n      }\n    }\n\n    return Promise.reject(error)\n  }\n)\n\n// Optional: Make axios available globally\nVue.prototype.$http = axios\n\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app')\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}