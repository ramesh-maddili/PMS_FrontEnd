{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      products: [],\n      newProduct: {\n        name: \"\",\n        price: \"\",\n        category: \"\"\n      },\n      currentPage: 1,\n      perPage: 6,\n      searchText: \"\",\n      totalPages: 0\n    };\n  },\n  computed: {\n    role() {\n      return localStorage.getItem(\"role\");\n    },\n    filteredProducts() {\n      const text = this.searchText.trim().toLowerCase();\n      return this.products.filter(p => p.name.toLowerCase().includes(text));\n    }\n  },\n  created() {\n    const page = parseInt(this.$route.query.page) || 1;\n    const search = this.$route.query.search || '';\n    this.searchText = search;\n    this.getProducts(page, search);\n    this.updateFromRoute();\n  },\n  watch: {\n    '$route.query.search'(newSearch) {\n      this.searchText = newSearch || '';\n      this.getProducts(this.currentPage, newSearch);\n    },\n    '$route.query.page'(newPage) {\n      const page = parseInt(newPage) || 1;\n      this.currentPage = page;\n      this.getProducts(page, this.searchText);\n    }\n  },\n  methods: {\n    updateFromRoute() {\n      const page = parseInt(this.$route.query.page) || 1;\n      const search = this.$route.query.search || '';\n      this.searchText = search;\n      this.getProducts(page, search);\n    },\n    methods: {\n      onSearchInput() {\n        // On typing/searching — reset to page 1 with search query\n        this.$router.push({\n          path: '/products',\n          query: {\n            search: this.searchText,\n            page: 1\n          }\n        });\n      }\n    },\n    async getProducts(page = 1, search = '') {\n      try {\n        const token = localStorage.getItem(\"token\");\n        //const currentQueryPage = parseInt(this.$route.query.page) || 1;\n        // if (currentQueryPage !== page) {\n        //   this.$router.push({ path: \"/products\", query: { page } });\n        // }\n        const res = await axios.get(`/products/getall?page=${page}&search=${search}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.products = res.data.data;\n        this.totalPages = res.data.totalPages;\n        this.currentPage = res.data.currentPage;\n      } catch (err) {\n        console.error(\"Get products failed:\", err.response?.data?.message || err.message);\n        if (err.response?.status === 401) {\n          alert(\"Unauthorized. Please log in again.\");\n        }\n      }\n    },\n    async addProduct() {\n      const {\n        name,\n        price,\n        category\n      } = this.newProduct;\n      const token = localStorage.getItem(\"token\");\n      if (!name || !price || !category) {\n        alert(\"Please fill all fields before adding a product.\");\n        return;\n      }\n      try {\n        await axios.post(\"/products/create\", this.newProduct, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        alert(`Product \"${name}\" added successfully!`);\n        this.newProduct = {\n          name: \"\",\n          price: \"\",\n          category: \"\"\n        };\n        this.getProducts();\n      } catch (err) {\n        console.error(\"Add failed:\", err.response?.data?.message || err.message);\n      }\n    },\n    async updateProduct() {\n      if (!this.newProduct._id) return;\n      const token = localStorage.getItem(\"token\");\n      try {\n        await axios.put(`/products/${this.newProduct._id}`, {\n          name: this.newProduct.name,\n          price: this.newProduct.price,\n          category: this.newProduct.category\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        alert(\"Product updated successfully!\");\n        this.newProduct = {\n          name: \"\",\n          price: \"\",\n          category: \"\"\n        };\n        this.getProducts();\n      } catch (err) {\n        console.error(\"Update failed:\", err.response?.data?.message || err.message);\n      }\n    },\n    async deleteProduct(id) {\n      const token = localStorage.getItem(\"token\");\n      const deletedProduct = this.products.find(p => p._id === id);\n      try {\n        await axios.delete(`/products/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        alert(`Deleted \"${deletedProduct?.name}\"`);\n        this.getProducts();\n      } catch (err) {\n        console.error(\"Delete failed:\", err.response?.data?.message || err.message);\n      }\n    },\n    editProduct(product) {\n      this.newProduct = {\n        ...product\n      };\n      this.$nextTick(() => {\n        this.$refs.nameInput?.focus();\n      });\n    },\n    cancelEdit() {\n      this.newProduct = {\n        name: \"\",\n        price: \"\",\n        category: \"\"\n      };\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.$router.push({\n          path: '/products',\n          query: {\n            page: this.currentPage + 1,\n            search: this.searchText\n          }\n        });\n      }\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.$router.push({\n          path: '/products',\n          query: {\n            page: this.currentPage - 1,\n            search: this.searchText\n          }\n        });\n      }\n    },\n    scrollToTop() {\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","products","newProduct","name","price","category","currentPage","perPage","searchText","totalPages","computed","role","localStorage","getItem","filteredProducts","text","trim","toLowerCase","filter","p","includes","created","page","parseInt","$route","query","search","getProducts","updateFromRoute","watch","$route.query.search","newSearch","$route.query.page","newPage","methods","onSearchInput","$router","push","path","token","res","get","headers","Authorization","err","console","error","response","message","status","alert","addProduct","post","updateProduct","_id","put","deleteProduct","id","deletedProduct","find","delete","editProduct","product","$nextTick","$refs","nameInput","focus","cancelEdit","nextPage","prevPage","scrollToTop","window","scrollTo","top","behavior"],"sources":["src/views/UserProducts.vue"],"sourcesContent":["<template>\r\n<div class=\"product-container\"><br />\r\n    <div v-if=\"role === 'Admin'\" class=\"form-box sticky-form\">\r\n        <h2>Add / Update Product</h2>\r\n        <input ref=\"nameInput\" v-model=\"newProduct.name\" placeholder=\"Product Name\" />\r\n        <input v-model=\"newProduct.price\" type=\"number\" placeholder=\"Price (₹)\" />\r\n        <input v-model=\"newProduct.category\" placeholder=\"Category\" />\r\n        <div class=\"button-group\">\r\n            <button v-if=\"!newProduct._id\" @click=\"addProduct\">Add Product</button>\r\n            <button v-else @click=\"updateProduct\">Update</button>\r\n            <button class=\"cancel\" @click=\"cancelEdit\">Cancel</button>\r\n        </div>\r\n    </div>\r\n    <div style=\"display: flex; justify-content: flex-end; margin-top: 10px;\">\r\n        <input type=\"text\" v-model=\"searchText\" @input=\"onSearchInput\" placeholder=\"Search product...\" class=\"search-input\" />\r\n    </div>\r\n    <!-- Product Cards -->\r\n    <div class=\"product-grid\">\r\n        <div v-for=\"product in filteredProducts\" :key=\"product._id\" class=\"product-card\">\r\n            <p><strong>{{ product.name }}</strong></p>\r\n            <p>₹{{ product.price }} | {{ product.category }}</p>\r\n            <div v-if=\"role === 'Admin'\" class=\"action-buttons\">\r\n                <button class=\"edit\" @click=\"editProduct(product)\">Edit</button>\r\n                <button class=\"delete\" @click=\"deleteProduct(product._id)\">Delete</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Pagination Controls -->\r\n    <div class=\"pagination\">\r\n        <button @click=\"prevPage\" :disabled=\"currentPage === 1\">⏮ Prev</button>\r\n        <span>Page {{ currentPage }} of {{ totalPages }}</span>\r\n        <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">Next ⏭</button>\r\n    </div>\r\n\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      products: [],\r\n      newProduct: { name: \"\", price: \"\", category: \"\" },\r\n      currentPage: 1,\r\n      perPage: 6,\r\n      searchText: \"\",\r\n      totalPages: 0\r\n    };\r\n  },\r\n  computed: {\r\n    role() {\r\n      return localStorage.getItem(\"role\");\r\n    },\r\n    filteredProducts() {\r\n      const text = this.searchText.trim().toLowerCase();\r\n      return this.products.filter(p => p.name.toLowerCase().includes(text));\r\n    }\r\n  },\r\n  created() {\r\n  const page = parseInt(this.$route.query.page) || 1;\r\n  const search = this.$route.query.search || '';\r\n  this.searchText = search;\r\n  this.getProducts(page, search);\r\n      this.updateFromRoute();\r\n    },\r\nwatch: {\r\n  '$route.query.search'(newSearch) {\r\n    this.searchText = newSearch || '';\r\n    this.getProducts(this.currentPage, newSearch);\r\n    },\r\n  '$route.query.page'(newPage) {\r\n    const page = parseInt(newPage) || 1;\r\n    this.currentPage = page;\r\n    this.getProducts(page, this.searchText);\r\n  }\r\n},\r\n\r\n  methods: {\r\n  updateFromRoute() {\r\n    const page = parseInt(this.$route.query.page) || 1;\r\n    const search = this.$route.query.search || '';\r\n    this.searchText = search;\r\n    this.getProducts(page, search);\r\n    \r\n  },\r\n  methods: {\r\n  onSearchInput() {\r\n    // On typing/searching — reset to page 1 with search query\r\n    this.$router.push({\r\n      path: '/products',\r\n      query: { search: this.searchText, page: 1 }\r\n    });\r\n  }\r\n  },\r\n    async getProducts(page = 1, search ='') {\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n        //const currentQueryPage = parseInt(this.$route.query.page) || 1;\r\n    // if (currentQueryPage !== page) {\r\n    //   this.$router.push({ path: \"/products\", query: { page } });\r\n    // }\r\n    const res = await axios.get(`/products/getall?page=${page}&search=${search}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    this.products = res.data.data;\r\n    this.totalPages = res.data.totalPages;\r\n    this.currentPage = res.data.currentPage;\r\n\r\n  } catch (err) {\r\n    console.error(\"Get products failed:\", err.response?.data?.message || err.message);\r\n    if (err.response?.status === 401) {\r\n      alert(\"Unauthorized. Please log in again.\");\r\n    }\r\n  }\r\n  },\r\n\r\n    async addProduct() {\r\n      const { name, price, category } = this.newProduct;\r\n      const token = localStorage.getItem(\"token\");\r\n\r\n      if (!name || !price || !category) {\r\n        alert(\"Please fill all fields before adding a product.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        await axios.post(\"/products/create\", this.newProduct, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        alert(`Product \"${name}\" added successfully!`);\r\n        this.newProduct = { name: \"\", price: \"\", category: \"\" };\r\n        this.getProducts();\r\n      } catch (err) {\r\n        console.error(\"Add failed:\", err.response?.data?.message || err.message);\r\n      }\r\n    },\r\n\r\n    async updateProduct() {\r\n      if (!this.newProduct._id) return;\r\n      const token = localStorage.getItem(\"token\");\r\n\r\n      try {\r\n        await axios.put(\r\n          `/products/${this.newProduct._id}`,\r\n          {\r\n            name: this.newProduct.name,\r\n            price: this.newProduct.price,\r\n            category: this.newProduct.category,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        alert(\"Product updated successfully!\");\r\n        this.newProduct = { name: \"\", price: \"\", category: \"\" };\r\n        this.getProducts();\r\n      } catch (err) {\r\n        console.error(\"Update failed:\", err.response?.data?.message || err.message);\r\n      }\r\n    },\r\n\r\n    async deleteProduct(id) {\r\n      const token = localStorage.getItem(\"token\");\r\n      const deletedProduct = this.products.find((p) => p._id === id);\r\n\r\n      try {\r\n        await axios.delete(`/products/${id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        alert(`Deleted \"${deletedProduct?.name}\"`);\r\n        this.getProducts();\r\n      } catch (err) {\r\n        console.error(\"Delete failed:\", err.response?.data?.message || err.message);\r\n      }\r\n    },\r\n\r\n    editProduct(product) {\r\n      this.newProduct = { ...product };\r\n      this.$nextTick(() => {\r\n        this.$refs.nameInput?.focus();\r\n      });\r\n    },\r\n\r\n    cancelEdit() {\r\n      this.newProduct = { name: \"\", price: \"\", category: \"\" };\r\n    },\r\n\r\n    nextPage() {\r\n    if (this.currentPage < this.totalPages) {\r\n      this.$router.push({\r\n        path: '/products',\r\n        query: { page: this.currentPage + 1, search: this.searchText }\r\n      });\r\n    }\r\n  },\r\n\r\n  prevPage() {\r\n    if (this.currentPage > 1) {\r\n      this.$router.push({\r\n        path: '/products',\r\n        query: { page: this.currentPage - 1, search: this.searchText }\r\n      });\r\n    }\r\n  },\r\n\r\n    scrollToTop() {\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.product-container {\r\n    max-width: 900px;\r\n    margin: auto;\r\n    background: #fdfdfd;\r\n    padding: 25px;\r\n    border-radius: 15px;\r\n    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh2 {\r\n    color: #2c3e50;\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.form-box input {\r\n    width: 100%;\r\n    padding: 10px;\r\n    margin-top: 8px;\r\n    margin-bottom: 12px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 6px;\r\n    box-sizing: border-box;\r\n    font-size: 15px;\r\n}\r\n\r\n.button-group button,\r\n.action-buttons button,\r\n.pagination button {\r\n    margin-right: 10px;\r\n    padding: 8px 14px;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    transition: 0.3s;\r\n}\r\n\r\nbutton {\r\n    background-color: #27ae60;\r\n    color: white;\r\n}\r\n\r\nbutton:hover {\r\n    background-color: #219150;\r\n}\r\n\r\n.cancel {\r\n    background-color: #95a5a6;\r\n}\r\n\r\n.edit {\r\n    background-color: #3498db;\r\n}\r\n\r\n.delete {\r\n    background-color: #e74c3c;\r\n}\r\n\r\n.product-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(230px, 1fr));\r\n    gap: 20px;\r\n    margin-top: 20px;\r\n}\r\n\r\n.product-card {\r\n    background-color: #ffffff;\r\n    border-radius: 10px;\r\n    padding: 15px;\r\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.07);\r\n    transition: transform 0.3s;\r\n}\r\n\r\n.product-card:hover {\r\n    transform: translateY(-4px);\r\n}\r\n\r\n.product-card p {\r\n    margin: 6px 0;\r\n}\r\n\r\n.pagination {\r\n    text-align: center;\r\n    margin-top: 20px;\r\n}\r\n\r\n.pagination button:disabled {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n}\r\n\r\n.search-input {\r\n    padding: 8px 12px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 6px;\r\n    font-size: 14px;\r\n    width: 240px;\r\n    transition: border-color 0.3s ease;\r\n}\r\n\r\n.search-input:focus {\r\n    outline: none;\r\n    border-color: #3498db;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}