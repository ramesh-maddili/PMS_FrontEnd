{"ast":null,"code":"import Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nVue.config.productionTip = false;\naxios.defaults.baseURL = 'http://localhost:5000';\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Function to decode token and get expiry time\nfunction getTokenExpiry(token) {\n  const decoded = jwt_decode(token);\n  return decoded.exp * 1000; // Convert to milliseconds\n}\n\n// Refresh token logic\nasync function refreshTokenBeforeExpiry() {\n  const token = localStorage.getItem('token');\n  if (!token) return;\n  const expiryTime = getTokenExpiry(token);\n  const now = Date.now();\n  const refreshThreshold = 5 * 60 * 1000; // 5 minutes\n\n  const timeToRefresh = expiryTime - now - refreshThreshold;\n  if (timeToRefresh > 0) {\n    setTimeout(async () => {\n      try {\n        const refreshToken = localStorage.getItem('refreshToken');\n        const response = await axios.post('/refresh-token', {\n          refreshToken\n        });\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('refreshToken', response.data.refreshToken);\n        console.log('Token refreshed automatically');\n        refreshTokenBeforeExpiry(); // Schedule next refresh\n      } catch (err) {\n        console.error('Auto refresh failed', err.message);\n        localStorage.clear();\n        window.location = '/login';\n      }\n    }, timeToRefresh);\n  } else {\n    console.warn('Token already near expiry or expired');\n  }\n}\nrefreshTokenBeforeExpiry(); // Kick off on app start\n\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app');","map":{"version":3,"names":["Vue","App","router","axios","jwt_decode","config","productionTip","defaults","baseURL","interceptors","request","use","token","localStorage","getItem","headers","Authorization","getTokenExpiry","decoded","exp","refreshTokenBeforeExpiry","expiryTime","now","Date","refreshThreshold","timeToRefresh","setTimeout","refreshToken","response","post","setItem","data","console","log","err","error","message","clear","window","location","warn","render","h","$mount"],"sources":["C:/Users/FL_LPT-746/product-management-system-frontend/src/main.js"],"sourcesContent":["import Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nVue.config.productionTip = false;\naxios.defaults.baseURL = 'http://localhost:5000';\n\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Function to decode token and get expiry time\nfunction getTokenExpiry(token) {\n  const decoded = jwt_decode(token);\n  return decoded.exp * 1000; // Convert to milliseconds\n}\n\n// Refresh token logic\nasync function refreshTokenBeforeExpiry() {\n  const token = localStorage.getItem('token');\n  if (!token) return;\n\n  const expiryTime = getTokenExpiry(token);\n  const now = Date.now();\n  const refreshThreshold = 5 * 60 * 1000; // 5 minutes\n\n  const timeToRefresh = expiryTime - now - refreshThreshold;\n\n  if (timeToRefresh > 0) {\n    setTimeout(async () => {\n      try {\n        const refreshToken = localStorage.getItem('refreshToken');\n        const response = await axios.post('/refresh-token', { refreshToken });\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('refreshToken', response.data.refreshToken);\n        console.log('Token refreshed automatically');\n        refreshTokenBeforeExpiry(); // Schedule next refresh\n      } catch (err) {\n        console.error('Auto refresh failed', err.message);\n        localStorage.clear();\n        window.location = '/login';\n      }\n    }, timeToRefresh);\n  } else {\n    console.warn('Token already near expiry or expired');\n  }\n}\n\nrefreshTokenBeforeExpiry(); // Kick off on app start\n\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app');\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,YAAY;AAEnCJ,GAAG,CAACK,MAAM,CAACC,aAAa,GAAG,KAAK;AAChCH,KAAK,CAACI,QAAQ,CAACC,OAAO,GAAG,uBAAuB;AAEhDL,KAAK,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAACN,MAAM,IAAI;EACvC,MAAMO,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTP,MAAM,CAACU,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOP,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,SAASY,cAAcA,CAACL,KAAK,EAAE;EAC7B,MAAMM,OAAO,GAAGd,UAAU,CAACQ,KAAK,CAAC;EACjC,OAAOM,OAAO,CAACC,GAAG,GAAG,IAAI,CAAC,CAAC;AAC7B;;AAEA;AACA,eAAeC,wBAAwBA,CAAA,EAAG;EACxC,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE;EAEZ,MAAMS,UAAU,GAAGJ,cAAc,CAACL,KAAK,CAAC;EACxC,MAAMU,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;EACtB,MAAME,gBAAgB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;EAExC,MAAMC,aAAa,GAAGJ,UAAU,GAAGC,GAAG,GAAGE,gBAAgB;EAEzD,IAAIC,aAAa,GAAG,CAAC,EAAE;IACrBC,UAAU,CAAC,YAAY;MACrB,IAAI;QACF,MAAMC,YAAY,GAAGd,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;QACzD,MAAMc,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,IAAI,CAAC,gBAAgB,EAAE;UAAEF;QAAa,CAAC,CAAC;QACrEd,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACnB,KAAK,CAAC;QAClDC,YAAY,CAACiB,OAAO,CAAC,cAAc,EAAEF,QAAQ,CAACG,IAAI,CAACJ,YAAY,CAAC;QAChEK,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5Cb,wBAAwB,CAAC,CAAC,CAAC,CAAC;MAC9B,CAAC,CAAC,OAAOc,GAAG,EAAE;QACZF,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAED,GAAG,CAACE,OAAO,CAAC;QACjDvB,YAAY,CAACwB,KAAK,CAAC,CAAC;QACpBC,MAAM,CAACC,QAAQ,GAAG,QAAQ;MAC5B;IACF,CAAC,EAAEd,aAAa,CAAC;EACnB,CAAC,MAAM;IACLO,OAAO,CAACQ,IAAI,CAAC,sCAAsC,CAAC;EACtD;AACF;AAEApB,wBAAwB,CAAC,CAAC,CAAC,CAAC;;AAE5B,IAAIpB,GAAG,CAAC;EACNE,MAAM;EACNuC,MAAM,EAAEC,CAAC,IAAIA,CAAC,CAACzC,GAAG;AACpB,CAAC,CAAC,CAAC0C,MAAM,CAAC,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}