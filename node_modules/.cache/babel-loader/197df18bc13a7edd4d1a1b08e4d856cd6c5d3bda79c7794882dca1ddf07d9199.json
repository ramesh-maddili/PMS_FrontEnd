{"ast":null,"code":"import Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nVue.config.productionTip = false;\naxios.defaults.baseURL = 'http://localhost:5000';\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Function to decode token and get expiry time\nfunction getTokenExpiry(token) {\n  const decoded = jwtDecode(token);\n  return decoded.exp * 1000; // convert to milliseconds\n}\n\n// Refresh token logic\nasync function refreshTokenBeforeExpiry() {\n  const token = localStorage.getItem('token');\n  if (!token) return;\n  const expiryTime = getTokenExpiry(token);\n  const now = Date.now();\n  const refreshThreshold = 5 * 60 * 1000; // 5 minutes\n  const timeToRefresh = expiryTime - now - refreshThreshold;\n  if (timeToRefresh > 0) {\n    setTimeout(() => refreshAndReschedule(), timeToRefresh);\n  } else {\n    refreshAndReschedule(); // immediate refresh if already near expiry\n  }\n  async function refreshAndReschedule() {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      const response = await axios.post('/refresh-token', {\n        refreshToken\n      });\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('refreshToken', response.data.refreshToken);\n      console.log('Token refreshed automatically');\n      refreshTokenBeforeExpiry(); // Schedule again\n    } catch (err) {\n      console.error('Auto refresh failed', err.message);\n      localStorage.clear();\n      window.location = '/login';\n    }\n  }\n}\n\n// Call the function on app startup\nrefreshTokenBeforeExpiry();\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app');","map":{"version":3,"names":["Vue","App","router","axios","jwtDecode","config","productionTip","defaults","baseURL","interceptors","request","use","token","localStorage","getItem","headers","Authorization","getTokenExpiry","decoded","exp","refreshTokenBeforeExpiry","expiryTime","now","Date","refreshThreshold","timeToRefresh","setTimeout","refreshAndReschedule","refreshToken","response","post","setItem","data","console","log","err","error","message","clear","window","location","render","h","$mount"],"sources":["C:/Users/FL_LPT-746/product-management-system-frontend/src/main.js"],"sourcesContent":["import Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport axios from 'axios';\nimport {jwtDecode} from 'jwt-decode';\n\nVue.config.productionTip = false;\naxios.defaults.baseURL = 'http://localhost:5000';\n\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Function to decode token and get expiry time\nfunction getTokenExpiry(token) {\n  const decoded = jwtDecode(token);\n  return decoded.exp * 1000; // convert to milliseconds\n}\n\n// Refresh token logic\nasync function refreshTokenBeforeExpiry() {\n  const token = localStorage.getItem('token');\n  if (!token) return;\n\n  const expiryTime = getTokenExpiry(token);\n  const now = Date.now();\n  const refreshThreshold = 5 * 60 * 1000; // 5 minutes\n  const timeToRefresh = expiryTime - now - refreshThreshold;\n\n  if (timeToRefresh > 0) {\n    setTimeout(() => refreshAndReschedule(), timeToRefresh);\n  } else {\n    refreshAndReschedule(); // immediate refresh if already near expiry\n  }\n\n  async function refreshAndReschedule() {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      const response = await axios.post('/refresh-token', { refreshToken });\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('refreshToken', response.data.refreshToken);\n      console.log('Token refreshed automatically');\n      refreshTokenBeforeExpiry(); // Schedule again\n    } catch (err) {\n      console.error('Auto refresh failed', err.message);\n      localStorage.clear();\n      window.location = '/login';\n    }\n  }\n}\n\n// Call the function on app startup\nrefreshTokenBeforeExpiry();\n\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app');\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAAQC,SAAS,QAAO,YAAY;AAEpCJ,GAAG,CAACK,MAAM,CAACC,aAAa,GAAG,KAAK;AAChCH,KAAK,CAACI,QAAQ,CAACC,OAAO,GAAG,uBAAuB;AAEhDL,KAAK,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAACN,MAAM,IAAI;EACvC,MAAMO,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTP,MAAM,CAACU,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOP,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,SAASY,cAAcA,CAACL,KAAK,EAAE;EAC7B,MAAMM,OAAO,GAAGd,SAAS,CAACQ,KAAK,CAAC;EAChC,OAAOM,OAAO,CAACC,GAAG,GAAG,IAAI,CAAC,CAAC;AAC7B;;AAEA;AACA,eAAeC,wBAAwBA,CAAA,EAAG;EACxC,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE;EAEZ,MAAMS,UAAU,GAAGJ,cAAc,CAACL,KAAK,CAAC;EACxC,MAAMU,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;EACtB,MAAME,gBAAgB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;EACxC,MAAMC,aAAa,GAAGJ,UAAU,GAAGC,GAAG,GAAGE,gBAAgB;EAEzD,IAAIC,aAAa,GAAG,CAAC,EAAE;IACrBC,UAAU,CAAC,MAAMC,oBAAoB,CAAC,CAAC,EAAEF,aAAa,CAAC;EACzD,CAAC,MAAM;IACLE,oBAAoB,CAAC,CAAC,CAAC,CAAC;EAC1B;EAEA,eAAeA,oBAAoBA,CAAA,EAAG;IACpC,IAAI;MACF,MAAMC,YAAY,GAAGf,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACzD,MAAMe,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,IAAI,CAAC,gBAAgB,EAAE;QAAEF;MAAa,CAAC,CAAC;MACrEf,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACpB,KAAK,CAAC;MAClDC,YAAY,CAACkB,OAAO,CAAC,cAAc,EAAEF,QAAQ,CAACG,IAAI,CAACJ,YAAY,CAAC;MAChEK,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5Cd,wBAAwB,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOe,GAAG,EAAE;MACZF,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAED,GAAG,CAACE,OAAO,CAAC;MACjDxB,YAAY,CAACyB,KAAK,CAAC,CAAC;MACpBC,MAAM,CAACC,QAAQ,GAAG,QAAQ;IAC5B;EACF;AACF;;AAEA;AACApB,wBAAwB,CAAC,CAAC;AAE1B,IAAIpB,GAAG,CAAC;EACNE,MAAM;EACNuC,MAAM,EAAEC,CAAC,IAAIA,CAAC,CAACzC,GAAG;AACpB,CAAC,CAAC,CAAC0C,MAAM,CAAC,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}