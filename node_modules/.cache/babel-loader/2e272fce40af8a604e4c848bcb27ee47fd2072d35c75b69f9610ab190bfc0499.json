{"ast":null,"code":"import axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:5000';\n\n// Request interceptor: attach access token\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor: refresh token on 401\naxios.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // Prevent infinite loop\n  if (error.response?.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      const res = await axios.post('/refresh', {\n        refreshToken\n      });\n      localStorage.setItem('token', res.data.token);\n\n      // Retry original request with new token\n      originalRequest.headers.Authorization = `Bearer ${res.data.token}`;\n      return axios(originalRequest);\n    } catch (err) {\n      localStorage.clear();\n      window.location.href = '/login';\n      return Promise.reject(err);\n    }\n  }\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","defaults","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","error","originalRequest","status","_retry","refreshToken","res","post","setItem","data","err","clear","window","location","href","Promise","reject"],"sources":["C:/Users/FL_LPT-746/product-management-system-frontend/src/main.js"],"sourcesContent":["import axios from 'axios'\n\naxios.defaults.baseURL = 'http://localhost:5000'\n\n// Request interceptor: attach access token\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token')\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n  return config\n})\n\n// Response interceptor: refresh token on 401\naxios.interceptors.response.use(\n  response => response,\n  async error => {\n    const originalRequest = error.config\n\n    // Prevent infinite loop\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true\n      try {\n        const refreshToken = localStorage.getItem('refreshToken')\n        const res = await axios.post('/refresh', { refreshToken })\n        localStorage.setItem('token', res.data.token)\n\n        // Retry original request with new token\n        originalRequest.headers.Authorization = `Bearer ${res.data.token}`\n        return axios(originalRequest)\n      } catch (err) {\n        localStorage.clear()\n        window.location.href = '/login'\n        return Promise.reject(err)\n      }\n    }\n    return Promise.reject(error)\n  }\n)\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzBA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,uBAAuB;;AAEhD;AACAF,KAAK,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAN,KAAK,CAACG,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC7BO,QAAQ,IAAIA,QAAQ,EACpB,MAAMC,KAAK,IAAI;EACb,MAAMC,eAAe,GAAGD,KAAK,CAACP,MAAM;;EAEpC;EACA,IAAIO,KAAK,CAACD,QAAQ,EAAEG,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,IAAI;MACF,MAAMC,YAAY,GAAGT,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACzD,MAAMS,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,UAAU,EAAE;QAAEF;MAAa,CAAC,CAAC;MAC1DT,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEF,GAAG,CAACG,IAAI,CAACd,KAAK,CAAC;;MAE7C;MACAO,eAAe,CAACJ,OAAO,CAACC,aAAa,GAAG,UAAUO,GAAG,CAACG,IAAI,CAACd,KAAK,EAAE;MAClE,OAAOP,KAAK,CAACc,eAAe,CAAC;IAC/B,CAAC,CAAC,OAAOQ,GAAG,EAAE;MACZd,YAAY,CAACe,KAAK,CAAC,CAAC;MACpBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MAC/B,OAAOC,OAAO,CAACC,MAAM,CAACN,GAAG,CAAC;IAC5B;EACF;EACA,OAAOK,OAAO,CAACC,MAAM,CAACf,KAAK,CAAC;AAC9B,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}