{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      products: [],\n      newProduct: {\n        name: '',\n        price: '',\n        category: ''\n      }\n    };\n  },\n  computed: {\n    role() {\n      return localStorage.getItem('role');\n    }\n  },\n  created() {\n    this.getProducts();\n  },\n  methods: {\n    async getProducts() {\n      try {\n        const token = localStorage.getItem('token');\n        const res = await axios.get('/products/getall', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.products = res.data;\n      } catch (err) {\n        console.error('Get products failed:', err.response?.data?.message || err.message);\n        if (err.response?.status === 401) {\n          alert('Unauthorized. Please log in again.');\n        }\n      }\n    },\n    async addProduct() {\n      const {\n        name,\n        price,\n        category\n      } = this.newProduct;\n      const token = localStorage.getItem('token');\n      if (!name || !price || !category) {\n        alert('Please fill all fields before adding a product.');\n        return;\n      }\n      try {\n        await axios.post('/products/create', this.newProduct, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        alert(`Product \"${name}\" added successfully!`);\n        this.newProduct = {\n          name: '',\n          price: '',\n          category: ''\n        };\n        this.getProducts();\n      } catch (err) {\n        console.error('Add failed:', err.response?.data?.message || err.message);\n      }\n    },\n    async updateProduct() {\n      if (!this.newProduct._id) return;\n      const token = localStorage.getItem('token');\n      try {\n        await axios.put(`/products/${this.newProduct._id}`, {\n          name: this.newProduct.name,\n          price: this.newProduct.price,\n          category: this.newProduct.category\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        alert('Product updated successfully!');\n        this.newProduct = {\n          name: '',\n          price: '',\n          category: ''\n        };\n        this.getProducts();\n      } catch (err) {\n        console.error('Update failed:', err.response?.data?.message || err.message);\n      }\n    },\n    async deleteProduct(id) {\n      const token = localStorage.getItem('token');\n      const deletedProduct = this.products.find(p => p._id === id);\n      try {\n        await axios.delete(`/products/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        alert(`Deleted \"${deletedProduct?.name}\"`);\n        this.getProducts();\n      } catch (err) {\n        console.error('Delete failed:', err.response?.data?.message || err.message);\n      }\n    },\n    editProduct(product) {\n      this.newProduct = {\n        ...product\n      };\n      this.$nextTick(() => {\n        this.$refs.nameInput?.focus();\n      });\n    },\n    cancelEdit() {\n      this.newProduct = {\n        name: '',\n        price: '',\n        category: ''\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","data","products","newProduct","name","price","category","computed","role","localStorage","getItem","created","getProducts","methods","token","res","get","headers","Authorization","err","console","error","response","message","status","alert","addProduct","post","updateProduct","_id","put","deleteProduct","id","deletedProduct","find","p","delete","editProduct","product","$nextTick","$refs","nameInput","focus","cancelEdit"],"sources":["src/views/UserProducts.vue"],"sourcesContent":["<template>\r\n  <div class=\"product-container\">\r\n    <!-- Admin Form to Add/Update Product -->\r\n    <div v-if=\"role === 'Admin'\" class=\"form-box sticky-form\">\r\n        <h2> Product List</h2>\r\n      <input ref=\"nameInput\" v-model=\"newProduct.name\" placeholder=\"Product Name\" />\r\n      <input v-model=\"newProduct.price\" type=\"number\" placeholder=\"Price (₹)\" />\r\n      <input v-model=\"newProduct.category\" placeholder=\"Category\" />\r\n\r\n      <div class=\"button-group\">\r\n        <button v-if=\"!newProduct._id\" @click=\"addProduct\">Add Product</button>\r\n        <button v-else @click=\"updateProduct\">Update Product</button>\r\n        <button class=\"cancel\" @click=\"cancelEdit\">Cancel</button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Product List -->\r\n    <div v-for=\"product in products\" :key=\"product._id\" class=\"product-item\">\r\n      <p><strong>{{ product.name }}</strong> - ₹{{ product.price }} ({{ product.category }})</p>\r\n\r\n      <div v-if=\"role === 'Admin'\" class=\"action-buttons\">\r\n        <button class=\"edit\" @click=\"editProduct(product)\">Edit</button>\r\n        <button class=\"delete\" @click=\"deleteProduct(product._id)\">Delete</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      products: [],\r\n      newProduct: {\r\n        name: '',\r\n        price: '',\r\n        category: ''\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    role() {\r\n      return localStorage.getItem('role');\r\n    }\r\n  },\r\n  created() {\r\n    this.getProducts();\r\n  },\r\n  methods: {\r\n    async getProducts() {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const res = await axios.get('/products/getall', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n        this.products = res.data;\r\n      } catch (err) {\r\n        console.error('Get products failed:', err.response?.data?.message || err.message);\r\n        if (err.response?.status === 401) {\r\n          alert('Unauthorized. Please log in again.');\r\n        }\r\n      }\r\n    },\r\n\r\n    async addProduct() {\r\n      const { name, price, category } = this.newProduct;\r\n      const token = localStorage.getItem('token');\r\n\r\n      if (!name || !price || !category) {\r\n        alert('Please fill all fields before adding a product.');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        await axios.post('/products/create', this.newProduct, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n\r\n        alert(`Product \"${name}\" added successfully!`);\r\n        this.newProduct = { name: '', price: '', category: '' };\r\n        this.getProducts();\r\n      } catch (err) {\r\n        console.error('Add failed:', err.response?.data?.message || err.message);\r\n      }\r\n    },\r\n\r\n    async updateProduct() {\r\n      if (!this.newProduct._id) return;\r\n      const token = localStorage.getItem('token');\r\n\r\n      try {\r\n        await axios.put(`/products/${this.newProduct._id}`, {\r\n          name: this.newProduct.name,\r\n          price: this.newProduct.price,\r\n          category: this.newProduct.category\r\n        }, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n\r\n        alert('Product updated successfully!');\r\n        this.newProduct = { name: '', price: '', category: '' };\r\n        this.getProducts();\r\n      } catch (err) {\r\n        console.error('Update failed:', err.response?.data?.message || err.message);\r\n      }\r\n    },\r\n\r\n    async deleteProduct(id) {\r\n      const token = localStorage.getItem('token');\r\n      const deletedProduct = this.products.find(p => p._id === id);\r\n\r\n      try {\r\n        await axios.delete(`/products/${id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        });\r\n\r\n        alert(`Deleted \"${deletedProduct?.name}\"`);\r\n        this.getProducts();\r\n      } catch (err) {\r\n        console.error('Delete failed:', err.response?.data?.message || err.message);\r\n      }\r\n    },\r\n\r\n    editProduct(product) {\r\n      this.newProduct = { ...product };\r\n      this.$nextTick(() => {\r\n        this.$refs.nameInput?.focus();\r\n      });\r\n    },\r\n\r\n    cancelEdit() {\r\n      this.newProduct = { name: '', price: '', category: '' };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.sticky-form {\r\n  position: sticky;\r\n  top: 50px; /* adjust as per your navbar height */\r\n  z-index: 1000;\r\n  background-color: #fff;\r\n  padding: 15px;\r\n  border-bottom: 1px solid #ccc;\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n\r\n.product-container {\r\n  max-width: 600px;\r\n  margin: auto;\r\n  background: #ffffff;\r\n  padding: 25px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.form-box input {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 6px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.button-group {\r\n  margin-top: 10px;\r\n}\r\n\r\n.button-group button,\r\n.action-buttons button {\r\n  margin-right: 10px;\r\n  margin-top: 10px;\r\n  padding: 8px 14px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n}\r\n\r\nbutton {\r\n  background-color: #2ecc71;\r\n  color: white;\r\n}\r\n\r\n.cancel {\r\n  background-color: #bdc3c7;\r\n  color: #2c3e50;\r\n}\r\n\r\n.edit {\r\n  background-color: #3498db;\r\n  color: white;\r\n}\r\n\r\n.delete {\r\n  background-color: #e74c3c;\r\n  color: white;\r\n}\r\n\r\n.product-item {\r\n  border-bottom: 1px solid #eee;\r\n  padding: 15px 0;\r\n}\r\n\r\n.product-item p {\r\n  margin: 0;\r\n  font-size: 16px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}